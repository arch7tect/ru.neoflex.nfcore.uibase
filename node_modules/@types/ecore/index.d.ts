/// <reference types="ecore" />

export namespace Ecore {
    export interface EObject {
        setEClass: (eClass: EClass)=>void;
        create: (attributes: any)=>EObject;
        has: (name: string)=>boolean;
        isSet: (name: string)=>boolean;
        set: (attrs: any, options: any)=>EObject;
        unset: (attrs: any, options: any)=>EObject;
        get: (feature: string)=>any;
        isTypeOf: (type: string|EObject)=>any;
        isKindOf: (type: string|EObject)=>any;
        eResource: ()=>Resource;
        eContent: ()=>Array;
        eURI: ()=>string;
        fragment: ()=>string;
        eClass: EClass;
    }
    export interface EList extends Array<EObject> {
        add: (eObject: EObject)=>EList;
        addAll: (arguments: Array<EObject>|EObject)=>EList;
        remove: (eObject: EObject)=>EList;
        clear: ()=>EList;
        size: ()=>number;
        at: (position: number)=>EObject;
        array: ()=>Array<EObject>;
        first: ()=>EObject;
        last: ()=>EObject;
        rest: (position: number)=>Array<EObject>;
        each: (iterator: (value: any, key: any, list: EList)=>void, context?: any)=>EList;
    }
    export interface EClass extends EObject{
    }
    export interface Resource extends EObject{
        load: (any)=>void;
    }
    export interface EPackage extends EObject{
    }
    export interface EPackageRegistry {
        register: (ePackage: EPackage)=>void;
        ePackages: ()=>EPackage[];
    }
    export interface ResourceSet {
        create: (any)=>Resource;
    }

    export namespace EPackage {
        const Registry: Ecore.EPackageRegistry;
    }
    export namespace ResourceSet {
        function create(): Ecore.ResourceSet;
    }
}

